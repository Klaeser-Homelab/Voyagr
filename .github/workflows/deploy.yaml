name: Deploy
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Deploy to LXC
    runs-on: self-hosted
    environment: prod
    
    env:
      # GitHub Runner
      DOCKER_HOST: tcp://10.0.0.35:2375
      DOCKER_CONTEXT_NAME: voyagr-ctx
      DOCKER_COMPOSE_FILE: docker-compose.prod.yml
      FRONTEND_IMAGE: voyagr-frontend:latest
      BACKEND_IMAGE: voyagr-backend:latest

      # BACKEND
      NODE_ENV: production
      FRONTEND_URL: https://voyagr.me/
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: postgres
      AUTH0_DOMAIN=dev-m0q23jbgtbwidn00.us.auth0.com
      # Backend Secrets - From GitHub Secrets
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      PGADMIN_EMAIL: ${{ secrets.PGADMIN_EMAIL }}
      PGADMIN_PASSWORD: ${{ secrets.PGADMIN_PASSWORD }}
      BACKEND_SESSION_SECRET: ${{ secrets.BACKEND_SESSION_SECRET }}
      
      # FRONTEND
      VITE_AUTH0_DOMAIN: dev-m0q23jbgtbwidn00.us.auth0.com
      VITE_AUTH0_CLIENT_ID: jJhP7FGnwad8ibaRpnhOjdHqJ69eilVn
      VITE_BACKEND_URL: https://voyagr.me:3001
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Environment Variables
        run: |
          echo "=== Checking environment variables ==="
          echo "Contents (with sensitive values redacted):"
          env | grep -E "POSTGRES_|FRONTEND_|PGADMIN_|VITE_|BACKEND_SESSION_SECRET" | while IFS='=' read -r key value; do
            if [[ $key == *"PASSWORD"* ]] || [[ $key == *"SECRET"* ]]; then
              echo "$key=********"
            else
              echo "$key=$value"
            fi
          done

      - name: Build Frontend image
        run: |
          docker build \
            -f Dockerfile.frontend \
            -t ${{ env.FRONTEND_IMAGE }} \
            .

      - name: Build Backend image
        run: |
          docker build \
            -f Dockerfile.backend \
            -t ${{ env.BACKEND_IMAGE }} \
            .

      - name: Set up Docker context
        run: |
          docker context \
            create ${{ env.DOCKER_CONTEXT_NAME }} \
            --docker host=${{ env.DOCKER_HOST }}

      - name: Save and load images to remote Docker
        run: |
          # Save images
          docker save ${{ env.FRONTEND_IMAGE }} > frontend.tar
          docker save ${{ env.BACKEND_IMAGE }} > backend.tar
          
          # Load images on remote host
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} load < frontend.tar
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} load < backend.tar
          
          # Cleanup
          rm frontend.tar backend.tar

      - name: Create volume if not exists
        run: |
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} volume create voyagr-db-data || true

      - name: Stop and remove existing containers
        env:
          COMPOSE_PROJECT_NAME: voyagr
        run: |
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} compose --file ${{ env.DOCKER_COMPOSE_FILE }} \
            stop frontend backend || true
          
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} compose --file ${{ env.DOCKER_COMPOSE_FILE }} \
            rm -f frontend backend || true
          
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} compose --file ${{ env.DOCKER_COMPOSE_FILE }} \
            up -d --remove-orphans

      - name: Cleanup
        if: always()
        run: |
          docker context rm ${{ env.DOCKER_CONTEXT_NAME }} --force || true


