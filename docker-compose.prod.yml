services:
  frontend:
    image: voyagr-frontend:latest
    container_name: voyagr-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - voyagr-network
    depends_on:
      - backend
    volumes:
      - /etc/letsencrypt/live/voyagr.me:/etc/nginx/ssl/live/voyagr.me:ro
      - /etc/letsencrypt/archive/voyagr.me:/etc/nginx/ssl/archive/voyagr.me:ro

  backend:
    image: voyagr-backend:latest
    container_name: voyagr-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    networks:
      - voyagr-network
    environment:
      POSTGRES_HOST: postgres
      NODE_ENV: PRODUCTION
      FRONTEND_URL: https://voyagr.me/
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      BACKEND_SESSION_SECRET: ${BACKEND_SESSION_SECRET}
      REDIS_URL: redis://voyagr-redis:6379
    depends_on:
      - redis      
      - postgres

  redis:
    image: redis:latest
    container_name: voyagr-redis
    ports:
      - "6379:6379"
    networks:
      - voyagr-network

  postgres:
    image: postgres:16
    container_name: voyagr-db
    environment:
      POSTGRES_DB: voyagr
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - voyagr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:

networks:
  voyagr-network:
    external: true